//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `AddScene.sks`.
    static let addSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "AddScene", pathExtension: "sks")
    /// Resource file `CloudGraphScene.sks`.
    static let cloudGraphSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "CloudGraphScene", pathExtension: "sks")
    /// Resource file `CloudSelectScene.sks`.
    static let cloudSelectSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "CloudSelectScene", pathExtension: "sks")
    /// Resource file `Lato-Light.ttf`.
    static let latoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Light", pathExtension: "ttf")
    /// Resource file `Lato-Regular.ttf`.
    static let latoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Regular", pathExtension: "ttf")
    /// Resource file `Licenses.md`.
    static let licensesMd = Rswift.FileResource(bundle: R.hostingBundle, name: "Licenses", pathExtension: "md")
    /// Resource file `brain_graph_v0.1.json`.
    static let brain_graph_v01Json = Rswift.FileResource(bundle: R.hostingBundle, name: "brain_graph_v0.1", pathExtension: "json")
    /// Resource file `launch-screen-image.jpg`.
    static let launchScreenImageJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "launch-screen-image", pathExtension: "jpg")
    /// Resource file `launch-screen-image@2x.jpg`.
    static let launchScreenImage2xJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "launch-screen-image@2x", pathExtension: "jpg")
    /// Resource file `launch-screen-image@3x.jpg`.
    static let launchScreenImage3xJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "launch-screen-image@3x", pathExtension: "jpg")
    
    /// `bundle.url(forResource: "AddScene", withExtension: "sks")`
    static func addSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "CloudGraphScene", withExtension: "sks")`
    static func cloudGraphSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cloudGraphSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "CloudSelectScene", withExtension: "sks")`
    static func cloudSelectSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cloudSelectSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Light", withExtension: "ttf")`
    static func latoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Lato-Regular", withExtension: "ttf")`
    static func latoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Licenses", withExtension: "md")`
    static func licensesMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensesMd
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "brain_graph_v0.1", withExtension: "json")`
    static func brain_graph_v01Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brain_graph_v01Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "launch-screen-image", withExtension: "jpg")`
    static func launchScreenImageJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.launchScreenImageJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "launch-screen-image@2x", withExtension: "jpg")`
    static func launchScreenImage2xJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.launchScreenImage2xJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "launch-screen-image@3x", withExtension: "jpg")`
    static func launchScreenImage3xJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.launchScreenImage3xJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `Lato-Light`.
    static let latoLight = Rswift.FontResource(fontName: "Lato-Light")
    /// Font `Lato-Regular`.
    static let latoRegular = Rswift.FontResource(fontName: "Lato-Regular")
    
    /// `UIFont(name: "Lato-Light", size: ...)`
    static func latoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoLight, size: size)
    }
    
    /// `UIFont(name: "Lato-Regular", size: ...)`
    static func latoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.latoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Light' could not be loaded, is 'Lato-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Regular' could not be loaded, is 'Lato-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 66 images.
  struct image {
    /// Image `background-image`.
    static let backgroundImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "background-image")
    /// Image `flat_brain_background`.
    static let flat_brain_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "flat_brain_background")
    /// Image `flat_brain_foreground`.
    static let flat_brain_foreground = Rswift.ImageResource(bundle: R.hostingBundle, name: "flat_brain_foreground")
    /// Image `ic-add`.
    static let icAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-add")
    /// Image `ic-big-blue-outline`.
    static let icBigBlueOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-big-blue-outline")
    /// Image `ic-big-gray-circle`.
    static let icBigGrayCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-big-gray-circle")
    /// Image `ic-big-gray-outline`.
    static let icBigGrayOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-big-gray-outline")
    /// Image `ic-circle-outline`.
    static let icCircleOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-circle-outline")
    /// Image `ic-circle-turquoise-outline`.
    static let icCircleTurquoiseOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-circle-turquoise-outline")
    /// Image `ic-circle-white-outline`.
    static let icCircleWhiteOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-circle-white-outline")
    /// Image `ic-circle`.
    static let icCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-circle")
    /// Image `ic-delete`.
    static let icDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-delete")
    /// Image `ic-empty`.
    static let icEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-empty")
    /// Image `ic-move`.
    static let icMove = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-move")
    /// Image `ic-placeholder-circle`.
    static let icPlaceholderCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-placeholder-circle")
    /// Image `ic-plus`.
    static let icPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-plus")
    /// Image `ic-pointer`.
    static let icPointer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-pointer")
    /// Image `ic-rocket-outlined`.
    static let icRocketOutlined = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rocket-outlined")
    /// Image `ic-rocket-white-outline`.
    static let icRocketWhiteOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rocket-white-outline")
    /// Image `ic-rocket`.
    static let icRocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-rocket")
    /// Image `ic-scale`.
    static let icScale = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-scale")
    /// Image `ic-star-white-outline`.
    static let icStarWhiteOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-star-white-outline")
    /// Image `ic-star`.
    static let icStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-star")
    /// Image `icon-about-cloud`.
    static let iconAboutCloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-cloud")
    /// Image `icon-about-collect`.
    static let iconAboutCollect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-collect")
    /// Image `icon-about-export`.
    static let iconAboutExport = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-export")
    /// Image `icon-about-levels`.
    static let iconAboutLevels = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-levels")
    /// Image `icon-about-sync`.
    static let iconAboutSync = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-sync")
    /// Image `icon-about-website`.
    static let iconAboutWebsite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-website")
    /// Image `icon-about-write`.
    static let iconAboutWrite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-about-write")
    /// Image `icon-check-black`.
    static let iconCheckBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-check-black")
    /// Image `icon-check`.
    static let iconCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-check")
    /// Image `icon-cloud-tabbar-selected`.
    static let iconCloudTabbarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-cloud-tabbar-selected")
    /// Image `icon-cloud-tabbar`.
    static let iconCloudTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-cloud-tabbar")
    /// Image `icon-explore-tabbar-selected`.
    static let iconExploreTabbarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-explore-tabbar-selected")
    /// Image `icon-explore-tabbar`.
    static let iconExploreTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-explore-tabbar")
    /// Image `icon-export-black`.
    static let iconExportBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-export-black")
    /// Image `icon-feedback`.
    static let iconFeedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-feedback")
    /// Image `icon-help`.
    static let iconHelp = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-help")
    /// Image `icon-info-tabbar-selected`.
    static let iconInfoTabbarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-info-tabbar-selected")
    /// Image `icon-info-tabbar`.
    static let iconInfoTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-info-tabbar")
    /// Image `icon-info`.
    static let iconInfo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-info")
    /// Image `icon-licenses`.
    static let iconLicenses = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-licenses")
    /// Image `icon-placeholder`.
    static let iconPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-placeholder")
    /// Image `icon-plus`.
    static let iconPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-plus")
    /// Image `icon-rate`.
    static let iconRate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-rate")
    /// Image `icon-rated`.
    static let iconRated = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-rated")
    /// Image `icon-scale`.
    static let iconScale = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-scale")
    /// Image `icon-setting-black`.
    static let iconSettingBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-setting-black")
    /// Image `icon-setting-small-black`.
    static let iconSettingSmallBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-setting-small-black")
    /// Image `icon-setting`.
    static let iconSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-setting")
    /// Image `icon-skill-beginner`.
    static let iconSkillBeginner = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-skill-beginner")
    /// Image `icon-skill-expert`.
    static let iconSkillExpert = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-skill-expert")
    /// Image `icon-skill-intermediate`.
    static let iconSkillIntermediate = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-skill-intermediate")
    /// Image `icon-skill-professional`.
    static let iconSkillProfessional = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-skill-professional")
    /// Image `icon-skills-tabbar-selected`.
    static let iconSkillsTabbarSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-skills-tabbar-selected")
    /// Image `icon-skills-tabbar`.
    static let iconSkillsTabbar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-skills-tabbar")
    /// Image `icon-trash`.
    static let iconTrash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-trash")
    /// Image `icon-x-black`.
    static let iconXBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-x-black")
    /// Image `icon-x`.
    static let iconX = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon-x")
    /// Image `launch-logo-image`.
    static let launchLogoImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-logo-image")
    /// Image `launch-screen-image.jpg`.
    static let launchScreenImageJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch-screen-image.jpg")
    /// Image `logo-girappe-small`.
    static let logoGirappeSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-girappe-small")
    /// Image `skill cloud brain`.
    static let skillCloudBrain = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill cloud brain")
    /// Image `skillcloud`.
    static let skillcloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "skillcloud")
    /// Image `sprite-node`.
    static let spriteNode = Rswift.ImageResource(bundle: R.hostingBundle, name: "sprite-node")
    
    /// `UIImage(named: "background-image", bundle: ..., traitCollection: ...)`
    static func backgroundImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backgroundImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flat_brain_background", bundle: ..., traitCollection: ...)`
    static func flat_brain_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flat_brain_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flat_brain_foreground", bundle: ..., traitCollection: ...)`
    static func flat_brain_foreground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flat_brain_foreground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-add", bundle: ..., traitCollection: ...)`
    static func icAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-big-blue-outline", bundle: ..., traitCollection: ...)`
    static func icBigBlueOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBigBlueOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-big-gray-circle", bundle: ..., traitCollection: ...)`
    static func icBigGrayCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBigGrayCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-big-gray-outline", bundle: ..., traitCollection: ...)`
    static func icBigGrayOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBigGrayOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-circle", bundle: ..., traitCollection: ...)`
    static func icCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-circle-outline", bundle: ..., traitCollection: ...)`
    static func icCircleOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCircleOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-circle-turquoise-outline", bundle: ..., traitCollection: ...)`
    static func icCircleTurquoiseOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCircleTurquoiseOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-circle-white-outline", bundle: ..., traitCollection: ...)`
    static func icCircleWhiteOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCircleWhiteOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-delete", bundle: ..., traitCollection: ...)`
    static func icDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-empty", bundle: ..., traitCollection: ...)`
    static func icEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-move", bundle: ..., traitCollection: ...)`
    static func icMove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-placeholder-circle", bundle: ..., traitCollection: ...)`
    static func icPlaceholderCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPlaceholderCircle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-plus", bundle: ..., traitCollection: ...)`
    static func icPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPlus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-pointer", bundle: ..., traitCollection: ...)`
    static func icPointer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icPointer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rocket", bundle: ..., traitCollection: ...)`
    static func icRocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRocket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rocket-outlined", bundle: ..., traitCollection: ...)`
    static func icRocketOutlined(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRocketOutlined, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-rocket-white-outline", bundle: ..., traitCollection: ...)`
    static func icRocketWhiteOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icRocketWhiteOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-scale", bundle: ..., traitCollection: ...)`
    static func icScale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icScale, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-star", bundle: ..., traitCollection: ...)`
    static func icStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-star-white-outline", bundle: ..., traitCollection: ...)`
    static func icStarWhiteOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStarWhiteOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-cloud", bundle: ..., traitCollection: ...)`
    static func iconAboutCloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutCloud, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-collect", bundle: ..., traitCollection: ...)`
    static func iconAboutCollect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutCollect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-export", bundle: ..., traitCollection: ...)`
    static func iconAboutExport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutExport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-levels", bundle: ..., traitCollection: ...)`
    static func iconAboutLevels(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutLevels, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-sync", bundle: ..., traitCollection: ...)`
    static func iconAboutSync(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutSync, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-website", bundle: ..., traitCollection: ...)`
    static func iconAboutWebsite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutWebsite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-about-write", bundle: ..., traitCollection: ...)`
    static func iconAboutWrite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAboutWrite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-check", bundle: ..., traitCollection: ...)`
    static func iconCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-check-black", bundle: ..., traitCollection: ...)`
    static func iconCheckBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCheckBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-cloud-tabbar", bundle: ..., traitCollection: ...)`
    static func iconCloudTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCloudTabbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-cloud-tabbar-selected", bundle: ..., traitCollection: ...)`
    static func iconCloudTabbarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCloudTabbarSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-explore-tabbar", bundle: ..., traitCollection: ...)`
    static func iconExploreTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconExploreTabbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-explore-tabbar-selected", bundle: ..., traitCollection: ...)`
    static func iconExploreTabbarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconExploreTabbarSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-export-black", bundle: ..., traitCollection: ...)`
    static func iconExportBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconExportBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-feedback", bundle: ..., traitCollection: ...)`
    static func iconFeedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconFeedback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-help", bundle: ..., traitCollection: ...)`
    static func iconHelp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconHelp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-info", bundle: ..., traitCollection: ...)`
    static func iconInfo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-info-tabbar", bundle: ..., traitCollection: ...)`
    static func iconInfoTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfoTabbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-info-tabbar-selected", bundle: ..., traitCollection: ...)`
    static func iconInfoTabbarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInfoTabbarSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-licenses", bundle: ..., traitCollection: ...)`
    static func iconLicenses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLicenses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-placeholder", bundle: ..., traitCollection: ...)`
    static func iconPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-plus", bundle: ..., traitCollection: ...)`
    static func iconPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconPlus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-rate", bundle: ..., traitCollection: ...)`
    static func iconRate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-rated", bundle: ..., traitCollection: ...)`
    static func iconRated(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconRated, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-scale", bundle: ..., traitCollection: ...)`
    static func iconScale(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconScale, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-setting", bundle: ..., traitCollection: ...)`
    static func iconSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSetting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-setting-black", bundle: ..., traitCollection: ...)`
    static func iconSettingBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSettingBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-setting-small-black", bundle: ..., traitCollection: ...)`
    static func iconSettingSmallBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSettingSmallBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-skill-beginner", bundle: ..., traitCollection: ...)`
    static func iconSkillBeginner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSkillBeginner, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-skill-expert", bundle: ..., traitCollection: ...)`
    static func iconSkillExpert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSkillExpert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-skill-intermediate", bundle: ..., traitCollection: ...)`
    static func iconSkillIntermediate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSkillIntermediate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-skill-professional", bundle: ..., traitCollection: ...)`
    static func iconSkillProfessional(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSkillProfessional, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-skills-tabbar", bundle: ..., traitCollection: ...)`
    static func iconSkillsTabbar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSkillsTabbar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-skills-tabbar-selected", bundle: ..., traitCollection: ...)`
    static func iconSkillsTabbarSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconSkillsTabbarSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-trash", bundle: ..., traitCollection: ...)`
    static func iconTrash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconTrash, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-x", bundle: ..., traitCollection: ...)`
    static func iconX(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconX, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon-x-black", bundle: ..., traitCollection: ...)`
    static func iconXBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconXBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-logo-image", bundle: ..., traitCollection: ...)`
    static func launchLogoImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchLogoImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch-screen-image.jpg", bundle: ..., traitCollection: ...)`
    static func launchScreenImageJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenImageJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo-girappe-small", bundle: ..., traitCollection: ...)`
    static func logoGirappeSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoGirappeSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "skill cloud brain", bundle: ..., traitCollection: ...)`
    static func skillCloudBrain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skillCloudBrain, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "skillcloud", bundle: ..., traitCollection: ...)`
    static func skillcloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skillcloud, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sprite-node", bundle: ..., traitCollection: ...)`
    static func spriteNode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spriteNode, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddSkillCell`.
    static let addSkillCell: Rswift.ReuseIdentifier<SkillCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddSkillCell")
    /// Reuse identifier `EmptyCell`.
    static let emptyCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "EmptyCell")
    /// Reuse identifier `GoogleImageCell`.
    static let googleImageCell: Rswift.ReuseIdentifier<GoogleImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GoogleImageCell")
    /// Reuse identifier `HeaderCell`.
    static let headerCell: Rswift.ReuseIdentifier<SkillTableViewCell> = Rswift.ReuseIdentifier(identifier: "HeaderCell")
    /// Reuse identifier `MenuCell`.
    static let menuCell: Rswift.ReuseIdentifier<InfoMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuCell")
    /// Reuse identifier `SkillLightCell`.
    static let skillLightCell: Rswift.ReuseIdentifier<SkillCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SkillLightCell")
    /// Reuse identifier `SkillLighterCell`.
    static let skillLighterCell: Rswift.ReuseIdentifier<SkillCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "SkillLighterCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `CloudSelectionViewController`, and contains static references to 1 segues.
    struct cloudSelectionViewController {
      /// Segue identifier `ShowCloudView`.
      static let showCloudView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CloudSelectionViewController, GeneratorViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowCloudView")
      
      /// Optionally returns a typed version of segue `ShowCloudView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCloudView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CloudSelectionViewController, GeneratorViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.cloudSelectionViewController.showCloudView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `GeneratorViewController`, and contains static references to 3 segues.
    struct generatorViewController {
      /// Segue identifier `ShowExportView`.
      static let showExportView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GeneratorViewController, CloudExportViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowExportView")
      /// Segue identifier `ShowPaletteSelection`.
      static let showPaletteSelection: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GeneratorViewController, PaletteSelectionViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowPaletteSelection")
      /// Segue identifier `UnwindToSelection`.
      static let unwindToSelection: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, GeneratorViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "UnwindToSelection")
      
      /// Optionally returns a typed version of segue `ShowExportView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showExportView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GeneratorViewController, CloudExportViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.generatorViewController.showExportView, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowPaletteSelection`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPaletteSelection(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GeneratorViewController, PaletteSelectionViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.generatorViewController.showPaletteSelection, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `UnwindToSelection`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindToSelection(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, GeneratorViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.generatorViewController.unwindToSelection, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `InfoViewController`, and contains static references to 3 segues.
    struct infoViewController {
      /// Segue identifier `ShowAbout`.
      static let showAbout: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfoViewController, AboutViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowAbout")
      /// Segue identifier `ShowHelp`.
      static let showHelp: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfoViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowHelp")
      /// Segue identifier `ShowLicenses`.
      static let showLicenses: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InfoViewController, LicensesViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowLicenses")
      
      /// Optionally returns a typed version of segue `ShowAbout`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAbout(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfoViewController, AboutViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infoViewController.showAbout, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowHelp`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHelp(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfoViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infoViewController.showHelp, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowLicenses`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLicenses(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InfoViewController, LicensesViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.infoViewController.showLicenses, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `GoogleImages`.
    static let googleImages = _R.storyboard.googleImages()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "GoogleImages", bundle: ...)`
    static func googleImages(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.googleImages)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localize` struct is generated, and contains static references to 43 localization keys.
    struct localize {
      /// Value: About
      static let aboutNavigationTitle = Rswift.StringResource(key: "about.navigation.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About
      static let infoOptionAboutTitle = Rswift.StringResource(key: "info.option.about.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About SkillCloud and GirAppe Studio
      static let infoOptionAboutSubtitle = Rswift.StringResource(key: "info.option.about.subtitle", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: About application
      static let aboutAppSectionSubtitle = Rswift.StringResource(key: "about.appSection.subtitle", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add new
      static let skillAddNewItem = Rswift.StringResource(key: "skill.add.new.item", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let alertCancel = Rswift.StringResource(key: "alert.cancel", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cloudGraphOptionCancel = Rswift.StringResource(key: "cloud.graph.option.cancel", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cloudGraphSkillOptionCancel = Rswift.StringResource(key: "cloud.graph.skill.option.cancel", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let imagesCancelButton = Rswift.StringResource(key: "images.cancel.button", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let skillAddImageOptionCancel = Rswift.StringResource(key: "skill.add.image.option.cancel", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let skillAddOptionCancel = Rswift.StringResource(key: "skill.add.option.cancel", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change image
      static let skillAddOptionChangeImage = Rswift.StringResource(key: "skill.add.option.changeImage", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cloud Graphs
      static let cloudGraphsNavigationTitle = Rswift.StringResource(key: "cloud.graphs.navigation.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm
      static let imagesConfirmButton = Rswift.StringResource(key: "images.confirm.button", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete graph
      static let cloudGraphOptionDelete = Rswift.StringResource(key: "cloud.graph.option.delete", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Explore all skills
      static let exploreSearchPlaceholder = Rswift.StringResource(key: "explore.search.placeholder", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Export graph
      static let cloudGraphOptionExport = Rswift.StringResource(key: "cloud.graph.option.export", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Feedback
      static let infoOptionFeedbackTitle = Rswift.StringResource(key: "info.option.feedback.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Google images
      static let skillAddImageOptionGoogleImages = Rswift.StringResource(key: "skill.add.image.option.googleImages", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Help & HowTo
      static let infoOptionHelpTitle = Rswift.StringResource(key: "info.option.help.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: How to use SkillCloud application
      static let infoOptionHelpSubtitle = Rswift.StringResource(key: "info.option.help.subtitle", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Info
      static let infoNavigationTitle = Rswift.StringResource(key: "info.navigation.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Licenses
      static let infoOptionLicensesTitle = Rswift.StringResource(key: "info.option.licenses.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Licenses and 3rd party libraries
      static let infoOptionLicensesSubtitle = Rswift.StringResource(key: "info.option.licenses.subtitle", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New skill added.
      static let skillAddSnackBarMessage = Rswift.StringResource(key: "skill.add.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let alertOk = Rswift.StringResource(key: "alert.ok", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Photo library
      static let skillAddImageOptionPhotoLibrary = Rswift.StringResource(key: "skill.add.image.option.photoLibrary", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rate
      static let infoOptionRateTitle = Rswift.StringResource(key: "info.option.rate.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rate us on AppStore
      static let infoOptionRateSubtitle = Rswift.StringResource(key: "info.option.rate.subtitle", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove node
      static let cloudGraphSkillOptionDelete = Rswift.StringResource(key: "cloud.graph.skill.option.delete", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove skill
      static let skillAddOptionRemoveSkill = Rswift.StringResource(key: "skill.add.option.removeSkill", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let imagesSearchButton = Rswift.StringResource(key: "images.search.button", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send us your feedback
      static let infoOptionFeedbackSubtitle = Rswift.StringResource(key: "info.option.feedback.subtitle", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sending failed. Please verify you email settings.
      static let feedbackSentFailureSnackBarMessage = Rswift.StringResource(key: "feedback.sent.failure.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Serialization error
      static let errorSerialization = Rswift.StringResource(key: "error.serialization", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skill deleted!
      static let skillDeleteSnackBarMessage = Rswift.StringResource(key: "skill.delete.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skill updated.
      static let skillUpdateSnackBarMessage = Rswift.StringResource(key: "skill.update.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SkillCloud
      static let aboutAppSectionTitle = Rswift.StringResource(key: "about.appSection.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skills
      static let skillsNavigationTitle = Rswift.StringResource(key: "skills.navigation.title", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Take photo
      static let skillAddImageOptionTakePhoto = Rswift.StringResource(key: "skill.add.image.option.takePhoto", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Thank you for sending feedback.
      static let feedbackSentSuccessSnackBarMessage = Rswift.StringResource(key: "feedback.sent.success.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown error occured!
      static let errorUnknown = Rswift.StringResource(key: "error.unknown", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: enter skill name
      static let skillAddNamePlaceholder = Rswift.StringResource(key: "skill.add.name.placeholder", tableName: "Localize", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: About
      static func aboutNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("about.navigation.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: About
      static func infoOptionAboutTitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.about.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: About SkillCloud and GirAppe Studio
      static func infoOptionAboutSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.about.subtitle", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: About application
      static func aboutAppSectionSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("about.appSection.subtitle", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Add new
      static func skillAddNewItem(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.new.item", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func alertCancel(_: Void = ()) -> String {
        return NSLocalizedString("alert.cancel", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func cloudGraphOptionCancel(_: Void = ()) -> String {
        return NSLocalizedString("cloud.graph.option.cancel", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func cloudGraphSkillOptionCancel(_: Void = ()) -> String {
        return NSLocalizedString("cloud.graph.skill.option.cancel", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func imagesCancelButton(_: Void = ()) -> String {
        return NSLocalizedString("images.cancel.button", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func skillAddImageOptionCancel(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.image.option.cancel", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func skillAddOptionCancel(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.option.cancel", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change image
      static func skillAddOptionChangeImage(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.option.changeImage", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cloud Graphs
      static func cloudGraphsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("cloud.graphs.navigation.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm
      static func imagesConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("images.confirm.button", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete graph
      static func cloudGraphOptionDelete(_: Void = ()) -> String {
        return NSLocalizedString("cloud.graph.option.delete", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Explore all skills
      static func exploreSearchPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("explore.search.placeholder", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Export graph
      static func cloudGraphOptionExport(_: Void = ()) -> String {
        return NSLocalizedString("cloud.graph.option.export", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Feedback
      static func infoOptionFeedbackTitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.feedback.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Google images
      static func skillAddImageOptionGoogleImages(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.image.option.googleImages", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Help & HowTo
      static func infoOptionHelpTitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.help.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: How to use SkillCloud application
      static func infoOptionHelpSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.help.subtitle", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Info
      static func infoNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("info.navigation.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Licenses
      static func infoOptionLicensesTitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.licenses.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Licenses and 3rd party libraries
      static func infoOptionLicensesSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.licenses.subtitle", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: New skill added.
      static func skillAddSnackBarMessage(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func alertOk(_: Void = ()) -> String {
        return NSLocalizedString("alert.ok", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Photo library
      static func skillAddImageOptionPhotoLibrary(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.image.option.photoLibrary", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Rate
      static func infoOptionRateTitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.rate.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Rate us on AppStore
      static func infoOptionRateSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.rate.subtitle", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Remove node
      static func cloudGraphSkillOptionDelete(_: Void = ()) -> String {
        return NSLocalizedString("cloud.graph.skill.option.delete", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Remove skill
      static func skillAddOptionRemoveSkill(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.option.removeSkill", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Search
      static func imagesSearchButton(_: Void = ()) -> String {
        return NSLocalizedString("images.search.button", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send us your feedback
      static func infoOptionFeedbackSubtitle(_: Void = ()) -> String {
        return NSLocalizedString("info.option.feedback.subtitle", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sending failed. Please verify you email settings.
      static func feedbackSentFailureSnackBarMessage(_: Void = ()) -> String {
        return NSLocalizedString("feedback.sent.failure.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Serialization error
      static func errorSerialization(_: Void = ()) -> String {
        return NSLocalizedString("error.serialization", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Skill deleted!
      static func skillDeleteSnackBarMessage(_: Void = ()) -> String {
        return NSLocalizedString("skill.delete.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Skill updated.
      static func skillUpdateSnackBarMessage(_: Void = ()) -> String {
        return NSLocalizedString("skill.update.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SkillCloud
      static func aboutAppSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("about.appSection.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Skills
      static func skillsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("skills.navigation.title", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Take photo
      static func skillAddImageOptionTakePhoto(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.image.option.takePhoto", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Thank you for sending feedback.
      static func feedbackSentSuccessSnackBarMessage(_: Void = ()) -> String {
        return NSLocalizedString("feedback.sent.success.snackBar.message", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unknown error occured!
      static func errorUnknown(_: Void = ()) -> String {
        return NSLocalizedString("error.unknown", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: enter skill name
      static func skillAddNamePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("skill.add.name.placeholder", tableName: "Localize", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct googleImages: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = GoogleImagesCollectionViewController
      
      let bundle = R.hostingBundle
      let name = "GoogleImages"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch-screen-image.jpg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch-screen-image.jpg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootTabBarViewController
      
      let addSkillViewController = StoryboardViewControllerResource<AddViewController>(identifier: "AddSkillViewController")
      let bundle = R.hostingBundle
      let name = "Main"
      
      func addSkillViewController(_: Void = ()) -> AddViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addSkillViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon-info-tabbar-selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-info-tabbar-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-sync") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-sync' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-website") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-website' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-explore-tabbar-selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-explore-tabbar-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-export") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-export' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-skills-tabbar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-skills-tabbar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-scale") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-scale' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-info-tabbar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-info-tabbar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-cloud") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-cloud' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-setting-small-black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-setting-small-black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-skills-tabbar-selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-skills-tabbar-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-check-black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-check-black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background-image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background-image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-cloud-tabbar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-cloud-tabbar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-big-blue-outline") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-big-blue-outline' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-x") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-x' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-cloud-tabbar-selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-cloud-tabbar-selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-trash") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-trash' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-x-black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-x-black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo-girappe-small") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo-girappe-small' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-add' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-export-black") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-export-black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "skillcloud") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'skillcloud' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-levels") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-levels' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-explore-tabbar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-explore-tabbar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-collect") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-collect' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon-about-write") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon-about-write' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().addSkillViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addSkillViewController' could not be loaded from storyboard 'Main' as 'AddViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
